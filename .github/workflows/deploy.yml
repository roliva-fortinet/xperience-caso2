name: Deploy EC2 with Apache + Lacework IaC Scan

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: write

jobs:
  Initialize:
    name: Initialize Tools
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Test Tools
        run: |
          aws --version
          terraform --version

  Lacework-Scanner:
    name: üîç Lacework IaC Scan
    needs: Initialize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create environment variables file
        run: |
          env | grep "GITHUB_\\|LW_\\|CI_" > env.list
          echo "LW_ACCOUNT=${{ secrets.LW_ACCOUNT }}" >> env.list
          echo "LW_API_KEY=${{ secrets.LW_API_KEY }}" >> env.list
          echo "LW_API_SECRET=${{ secrets.LW_API_SECRET }}" >> env.list

      - name: Run Lacework IaC Scan
        run: |
          mkdir -p /tmp/iac_reports
          docker run --rm \
            --env-file env.list \
            -v "$PWD:/workdir" \
            -w /workdir \
            lacework/codesec-iac \
            lacework iac scan --directory /workdir --sarif --output-path /tmp/iac_reports/results.sarif



      - name: Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: Lacework IaC Reports
          path: /tmp/iac_reports/*

      - name: Fail if Critical Findings Found
        run: |
          RESULTS_JSON="/tmp/iac_reports/scan.json"
          if [ -f "$RESULTS_JSON" ]; then
            CRITICALS=$(jq '[.[].findings[] | select(.severity == "Critical")] | length' "$RESULTS_JSON")
            echo "üîé Critical findings: $CRITICALS"
            if [ "$CRITICALS" -gt 0 ]; then
              echo "üö® Found critical IaC issues. Failing the job."
              exit 1
            else
              echo "‚úÖ No critical issues found. Continuing..."
            fi
          else
            echo "‚ùå No scan.json found, cannot evaluate findings."
            exit 1
          fi

      - name: Publish IaC Scan Summary
        run: |
          RESULTS_JSON="/tmp/iac_reports/scan.json"
          if [ -f "$RESULTS_JSON" ]; then
            TESTS=$(jq -r '.[].findings | length' "$RESULTS_JSON")
            PASSED=$(jq -r '.[].findings | map(select(.pass == true)) | length' "$RESULTS_JSON")
            FAILED=$(jq -r '.[].findings | map(select(.pass == false)) | length' "$RESULTS_JSON")
            echo "<table><tr><th>Total</th><th>Passed ‚úÖ</th><th>Failed ‚ùå</th></tr><tr><td>${TESTS}</td><td>${PASSED}</td><td>${FAILED}</td></tr></table>" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No scan results found to summarize." >> $GITHUB_STEP_SUMMARY
          fi

  Terraform-Deploy:
    name: Terraform Deploy
    needs: Lacework-Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init & Plan
        run: |
          terraform init
          terraform plan -out=plan.tfplan
          
      - name: Terraform Apply
        run: terraform apply --auto-approve plan.tfplan
